{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "068f51c8ecd6dd3fd7da4445f7d51da673447ba6b28e58209c13d99e8b125b73",
          "withoutMetadata": "068f51c8ecd6dd3fd7da4445f7d51da673447ba6b28e58209c13d99e8b125b73",
          "linkedWithoutMetadata": "068f51c8ecd6dd3fd7da4445f7d51da673447ba6b28e58209c13d99e8b125b73"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0374fe99204a0363ff37f2c26f924e943b5e8ae0dea5453442daf58d1693776c",
          "withoutMetadata": "0374fe99204a0363ff37f2c26f924e943b5e8ae0dea5453442daf58d1693776c",
          "linkedWithoutMetadata": "0374fe99204a0363ff37f2c26f924e943b5e8ae0dea5453442daf58d1693776c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6195c470c7387c158a3c8d798ca7097ad674a9860219ba79c0dac068aa7998f8",
          "withoutMetadata": "6195c470c7387c158a3c8d798ca7097ad674a9860219ba79c0dac068aa7998f8",
          "linkedWithoutMetadata": "6195c470c7387c158a3c8d798ca7097ad674a9860219ba79c0dac068aa7998f8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "4b0e6080b1563215805d8ee03bcaf067c26b7370656a79bb418859cce60e95ac",
          "withoutMetadata": "4b0e6080b1563215805d8ee03bcaf067c26b7370656a79bb418859cce60e95ac",
          "linkedWithoutMetadata": "4b0e6080b1563215805d8ee03bcaf067c26b7370656a79bb418859cce60e95ac"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "a19977202659555aa876245e066cc98d73f9aa30a7296321cdca729797b529fd",
          "withoutMetadata": "a19977202659555aa876245e066cc98d73f9aa30a7296321cdca729797b529fd",
          "linkedWithoutMetadata": "a19977202659555aa876245e066cc98d73f9aa30a7296321cdca729797b529fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "26295c57291f803e0b0b08aefb50b9b13f5ea7d0da3079177bc54029fa996056",
          "withoutMetadata": "26295c57291f803e0b0b08aefb50b9b13f5ea7d0da3079177bc54029fa996056",
          "linkedWithoutMetadata": "26295c57291f803e0b0b08aefb50b9b13f5ea7d0da3079177bc54029fa996056"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ReskaToken.sol:ReskaToken": {
        "src": "contracts/ReskaToken.sol:23",
        "version": {
          "withMetadata": "6c61c44c54e778b335e4c69f95ab215cb8c25bbf069f4780275abb7d3bb52916",
          "withoutMetadata": "6c61c44c54e778b335e4c69f95ab215cb8c25bbf069f4780275abb7d3bb52916",
          "linkedWithoutMetadata": "6c61c44c54e778b335e4c69f95ab215cb8c25bbf069f4780275abb7d3bb52916"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address,address,address)",
          "pause()",
          "unpause()",
          "mint(address,uint256)",
          "getAllocations()",
          "remainingMintCap()",
          "safeRenounceRole(bytes32,address)",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReskaToken",
            "src": "contracts/ReskaToken.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReskaToken",
              "label": "totalMintedAdditional",
              "type": "t_uint256",
              "src": "contracts/ReskaToken.sol:33"
            },
            {
              "contract": "ReskaToken",
              "label": "allocations",
              "type": "t_array(t_struct(Allocation)3489_storage)dyn_storage",
              "src": "contracts/ReskaToken.sol:54"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(Allocation)3489_storage)dyn_storage": {
              "label": "struct ReskaToken.Allocation[]"
            },
            "t_struct(Allocation)3489_storage": {
              "label": "struct ReskaToken.Allocation",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "percentage",
                  "type": "t_uint8"
                },
                {
                  "label": "allocationType",
                  "type": "t_enum(AllocationTypes)3481"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_enum(AllocationTypes)3481": {
              "label": "enum ReskaToken.AllocationTypes",
              "members": [
                "FOUNDER",
                "ADVISORS",
                "INVESTORS",
                "AIRDROPS",
                "ECOSYSTEM",
                "TREASURY",
                "PUBLIC_SALE",
                "ESCROW"
              ]
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ReskaTokenVesting.sol:ReskaTokenVesting": {
        "src": "contracts/ReskaTokenVesting.sol:28",
        "version": {
          "withMetadata": "7c3871e26faae0318d5a2e424fbc0ca0c9a95b44aab6abe9917ede7d6f20efb1",
          "withoutMetadata": "7c3871e26faae0318d5a2e424fbc0ca0c9a95b44aab6abe9917ede7d6f20efb1",
          "linkedWithoutMetadata": "7c3871e26faae0318d5a2e424fbc0ca0c9a95b44aab6abe9917ede7d6f20efb1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getToken()",
          "getVestingSchedulesTotalAmount()",
          "getVestingSchedulesCount()",
          "getVestingScheduleIdAtIndex(uint256)",
          "getVestingScheduleIdAtHolderIndex(address,uint256)",
          "getVestingSchedulesCountByHolder(address)",
          "getVestingSchedule(bytes32)",
          "getReleasableAmount(bytes32)",
          "computeVestingScheduleIdForAddressAndIndex(address,uint256)",
          "createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)",
          "release(bytes32)",
          "revoke(bytes32)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReskaTokenVesting",
            "src": "contracts/ReskaTokenVesting.sol:91"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token",
            "src": "contracts/ReskaTokenVesting.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReskaTokenVesting",
              "label": "vestingSchedulesIds",
              "type": "t_array(t_bytes32)dyn_storage",
              "src": "contracts/ReskaTokenVesting.sol:59"
            },
            {
              "contract": "ReskaTokenVesting",
              "label": "vestingSchedules",
              "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)4183_storage)",
              "src": "contracts/ReskaTokenVesting.sol:60"
            },
            {
              "contract": "ReskaTokenVesting",
              "label": "holderVestingSchedulesIds",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "src": "contracts/ReskaTokenVesting.sol:61"
            },
            {
              "contract": "ReskaTokenVesting",
              "label": "vestingSchedulesTotalAmount",
              "type": "t_uint256",
              "src": "contracts/ReskaTokenVesting.sol:64"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_struct(VestingSchedule)4183_storage)": {
              "label": "mapping(bytes32 => struct ReskaTokenVesting.VestingSchedule)"
            },
            "t_struct(VestingSchedule)4183_storage": {
              "label": "struct ReskaTokenVesting.VestingSchedule",
              "members": [
                {
                  "label": "beneficiary",
                  "type": "t_address"
                },
                {
                  "label": "cliff",
                  "type": "t_uint256"
                },
                {
                  "label": "start",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                },
                {
                  "label": "slicePeriodSeconds",
                  "type": "t_uint256"
                },
                {
                  "label": "revocable",
                  "type": "t_bool"
                },
                {
                  "label": "amountTotal",
                  "type": "t_uint256"
                },
                {
                  "label": "released",
                  "type": "t_uint256"
                },
                {
                  "label": "revoked",
                  "type": "t_bool"
                },
                {
                  "label": "created",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "068f51c8ecd6dd3fd7da4445f7d51da673447ba6b28e58209c13d99e8b125b73",
          "withoutMetadata": "068f51c8ecd6dd3fd7da4445f7d51da673447ba6b28e58209c13d99e8b125b73",
          "linkedWithoutMetadata": "068f51c8ecd6dd3fd7da4445f7d51da673447ba6b28e58209c13d99e8b125b73"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0374fe99204a0363ff37f2c26f924e943b5e8ae0dea5453442daf58d1693776c",
          "withoutMetadata": "0374fe99204a0363ff37f2c26f924e943b5e8ae0dea5453442daf58d1693776c",
          "linkedWithoutMetadata": "0374fe99204a0363ff37f2c26f924e943b5e8ae0dea5453442daf58d1693776c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6195c470c7387c158a3c8d798ca7097ad674a9860219ba79c0dac068aa7998f8",
          "withoutMetadata": "6195c470c7387c158a3c8d798ca7097ad674a9860219ba79c0dac068aa7998f8",
          "linkedWithoutMetadata": "6195c470c7387c158a3c8d798ca7097ad674a9860219ba79c0dac068aa7998f8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "4b0e6080b1563215805d8ee03bcaf067c26b7370656a79bb418859cce60e95ac",
          "withoutMetadata": "4b0e6080b1563215805d8ee03bcaf067c26b7370656a79bb418859cce60e95ac",
          "linkedWithoutMetadata": "4b0e6080b1563215805d8ee03bcaf067c26b7370656a79bb418859cce60e95ac"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "a19977202659555aa876245e066cc98d73f9aa30a7296321cdca729797b529fd",
          "withoutMetadata": "a19977202659555aa876245e066cc98d73f9aa30a7296321cdca729797b529fd",
          "linkedWithoutMetadata": "a19977202659555aa876245e066cc98d73f9aa30a7296321cdca729797b529fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "26295c57291f803e0b0b08aefb50b9b13f5ea7d0da3079177bc54029fa996056",
          "withoutMetadata": "26295c57291f803e0b0b08aefb50b9b13f5ea7d0da3079177bc54029fa996056",
          "linkedWithoutMetadata": "26295c57291f803e0b0b08aefb50b9b13f5ea7d0da3079177bc54029fa996056"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ReskaToken.sol:ReskaToken": {
        "src": "contracts/ReskaToken.sol:23",
        "version": {
          "withMetadata": "6c61c44c54e778b335e4c69f95ab215cb8c25bbf069f4780275abb7d3bb52916",
          "withoutMetadata": "6c61c44c54e778b335e4c69f95ab215cb8c25bbf069f4780275abb7d3bb52916",
          "linkedWithoutMetadata": "6c61c44c54e778b335e4c69f95ab215cb8c25bbf069f4780275abb7d3bb52916"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address,address,address)",
          "pause()",
          "unpause()",
          "mint(address,uint256)",
          "getAllocations()",
          "remainingMintCap()",
          "safeRenounceRole(bytes32,address)",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReskaToken",
            "src": "contracts/ReskaToken.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReskaToken",
              "label": "totalMintedAdditional",
              "type": "t_uint256",
              "src": "contracts/ReskaToken.sol:33"
            },
            {
              "contract": "ReskaToken",
              "label": "allocations",
              "type": "t_array(t_struct(Allocation)3489_storage)dyn_storage",
              "src": "contracts/ReskaToken.sol:54"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_struct(Allocation)3489_storage)dyn_storage": {
              "label": "struct ReskaToken.Allocation[]"
            },
            "t_struct(Allocation)3489_storage": {
              "label": "struct ReskaToken.Allocation",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "percentage",
                  "type": "t_uint8"
                },
                {
                  "label": "allocationType",
                  "type": "t_enum(AllocationTypes)3481"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_enum(AllocationTypes)3481": {
              "label": "enum ReskaToken.AllocationTypes",
              "members": [
                "FOUNDER",
                "ADVISORS",
                "INVESTORS",
                "AIRDROPS",
                "ECOSYSTEM",
                "TREASURY",
                "PUBLIC_SALE",
                "ESCROW"
              ]
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ReskaTokenVesting.sol:ReskaTokenVesting": {
        "src": "contracts/ReskaTokenVesting.sol:28",
        "version": {
          "withMetadata": "7c3871e26faae0318d5a2e424fbc0ca0c9a95b44aab6abe9917ede7d6f20efb1",
          "withoutMetadata": "7c3871e26faae0318d5a2e424fbc0ca0c9a95b44aab6abe9917ede7d6f20efb1",
          "linkedWithoutMetadata": "7c3871e26faae0318d5a2e424fbc0ca0c9a95b44aab6abe9917ede7d6f20efb1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getToken()",
          "getVestingSchedulesTotalAmount()",
          "getVestingSchedulesCount()",
          "getVestingScheduleIdAtIndex(uint256)",
          "getVestingScheduleIdAtHolderIndex(address,uint256)",
          "getVestingSchedulesCountByHolder(address)",
          "getVestingSchedule(bytes32)",
          "getReleasableAmount(bytes32)",
          "computeVestingScheduleIdForAddressAndIndex(address,uint256)",
          "createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)",
          "release(bytes32)",
          "revoke(bytes32)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReskaTokenVesting",
            "src": "contracts/ReskaTokenVesting.sol:91"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token",
            "src": "contracts/ReskaTokenVesting.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReskaTokenVesting",
              "label": "vestingSchedulesIds",
              "type": "t_array(t_bytes32)dyn_storage",
              "src": "contracts/ReskaTokenVesting.sol:59"
            },
            {
              "contract": "ReskaTokenVesting",
              "label": "vestingSchedules",
              "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)4183_storage)",
              "src": "contracts/ReskaTokenVesting.sol:60"
            },
            {
              "contract": "ReskaTokenVesting",
              "label": "holderVestingSchedulesIds",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "src": "contracts/ReskaTokenVesting.sol:61"
            },
            {
              "contract": "ReskaTokenVesting",
              "label": "vestingSchedulesTotalAmount",
              "type": "t_uint256",
              "src": "contracts/ReskaTokenVesting.sol:64"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_struct(VestingSchedule)4183_storage)": {
              "label": "mapping(bytes32 => struct ReskaTokenVesting.VestingSchedule)"
            },
            "t_struct(VestingSchedule)4183_storage": {
              "label": "struct ReskaTokenVesting.VestingSchedule",
              "members": [
                {
                  "label": "beneficiary",
                  "type": "t_address"
                },
                {
                  "label": "cliff",
                  "type": "t_uint256"
                },
                {
                  "label": "start",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                },
                {
                  "label": "slicePeriodSeconds",
                  "type": "t_uint256"
                },
                {
                  "label": "revocable",
                  "type": "t_bool"
                },
                {
                  "label": "amountTotal",
                  "type": "t_uint256"
                },
                {
                  "label": "released",
                  "type": "t_uint256"
                },
                {
                  "label": "revoked",
                  "type": "t_bool"
                },
                {
                  "label": "created",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    }
  ]
}